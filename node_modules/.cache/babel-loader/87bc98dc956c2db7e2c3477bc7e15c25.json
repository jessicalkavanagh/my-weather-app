{"ast":null,"code":"import _defineProperty from \"/Users/jessica/Desktop/Shecodes/Javascript/my-weather-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jessica/Desktop/Shecodes/Javascript/my-weather-app/src/containers/AppContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport { CURRENT_WEATHER, HOURLY_FORECAST } from '../data/mockWeather';\nimport ComplaintPage from '../pages/ComplaintPage';\nimport WeatherPage from '../pages/WeatherPage';\nexport const WeatherContext = React.createContext(); // Create a context for the Weather.\n\nconst CITIES = ['London', 'Paris', 'Perth', 'Tokyo', 'Sydney'];\n\nclass AppContainer extends Component {\n  // note: drilling \"Forecast\" down to the Forecast component will be a pain, we want to provide it to the whole app using context.\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: CITIES[0],\n      temperature: CURRENT_WEATHER.main.temp,\n      forecast: HOURLY_FORECAST.list\n    };\n    this.changeCity = this.changeCity.bind(this);\n  }\n\n  changeCity() {\n    this.setState({\n      city: this.getRandomCity(CITIES)\n    });\n  }\n\n  getRandomCity(array) {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  render() {\n    return React.createElement(WeatherContext.Provider, {\n      // Populate context with our state object!\n      value: _objectSpread({}, this.state, {\n        changeCity: this.changeCity\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      component: WeatherPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/complain\",\n      component: ComplaintPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default AppContainer;","map":{"version":3,"sources":["/Users/jessica/Desktop/Shecodes/Javascript/my-weather-app/src/containers/AppContainer.js"],"names":["React","Component","Route","CURRENT_WEATHER","HOURLY_FORECAST","ComplaintPage","WeatherPage","WeatherContext","createContext","CITIES","AppContainer","constructor","props","state","city","temperature","main","temp","forecast","list","changeCity","bind","setState","getRandomCity","array","Math","floor","random","length","render"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,qBAAjD;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAO,MAAMC,cAAc,GAAGP,KAAK,CAACQ,aAAN,EAAvB,C,CAA8C;;AAErD,MAAMC,MAAM,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,EAA6B,OAA7B,EAAsC,QAAtC,CAAf;;AAEA,MAAMC,YAAN,SAA2BT,SAA3B,CAAqC;AACnC;AACAU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAEL,MAAM,CAAC,CAAD,CADD;AAEXM,MAAAA,WAAW,EAAEZ,eAAe,CAACa,IAAhB,CAAqBC,IAFvB;AAGXC,MAAAA,QAAQ,EAAEd,eAAe,CAACe;AAHf,KAAb;AAMA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAEDD,EAAAA,UAAU,GAAG;AACX,SAAKE,QAAL,CAAc;AAAER,MAAAA,IAAI,EAAE,KAAKS,aAAL,CAAmBd,MAAnB;AAAR,KAAd;AACD;;AAEDc,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,WAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACI,MAAjC,CAAD,CAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB;AACvB,MAAA,KAAK,oBAAO,KAAKhB,KAAZ;AAAmBO,QAAAA,UAAU,EAAE,KAAKA;AAApC,QADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,KAAK,MAArB;AAAsB,MAAA,SAAS,EAAEd,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,SAAS,EAAED,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAQD;;AA/BkC;;AAkCrC,eAAeK,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport { CURRENT_WEATHER, HOURLY_FORECAST } from '../data/mockWeather';\nimport ComplaintPage from '../pages/ComplaintPage';\nimport WeatherPage from '../pages/WeatherPage';\n\nexport const WeatherContext = React.createContext(); // Create a context for the Weather.\n\nconst CITIES = ['London', 'Paris', 'Perth', 'Tokyo', 'Sydney'];\n\nclass AppContainer extends Component {\n  // note: drilling \"Forecast\" down to the Forecast component will be a pain, we want to provide it to the whole app using context.\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      city: CITIES[0],\n      temperature: CURRENT_WEATHER.main.temp,\n      forecast: HOURLY_FORECAST.list\n    };\n\n    this.changeCity = this.changeCity.bind(this);\n  }\n\n  changeCity() {\n    this.setState({ city: this.getRandomCity(CITIES) });\n  }\n\n  getRandomCity(array) {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  render() {\n    return (\n      <WeatherContext.Provider // Populate context with our state object!\n        value={{ ...this.state, changeCity: this.changeCity }}\n      >\n        <Route path=\"/\" exact component={WeatherPage} />\n        <Route path=\"/complain\" component={ComplaintPage} />\n      </WeatherContext.Provider>\n    );\n  }\n}\n\nexport default AppContainer;"]},"metadata":{},"sourceType":"module"}